// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package contract

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitSplVault is the `init_spl_vault` instruction.
type InitSplVaultInstruction struct {
	BridgeId *string

	// [0] = [] mint
	//
	// [1] = [WRITE] spl_vault
	//
	// [2] = [WRITE, SIGNER] signer
	//
	// [3] = [] token_program
	//
	// [4] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitSplVaultInstructionBuilder creates a new `InitSplVaultInstruction` instruction builder.
func NewInitSplVaultInstructionBuilder() *InitSplVaultInstruction {
	nd := &InitSplVaultInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	nd.AccountMetaSlice[4] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetBridgeId sets the "bridge_id" parameter.
func (inst *InitSplVaultInstruction) SetBridgeId(bridge_id string) *InitSplVaultInstruction {
	inst.BridgeId = &bridge_id
	return inst
}

// SetMintAccount sets the "mint" account.
func (inst *InitSplVaultInstruction) SetMintAccount(mint ag_solanago.PublicKey) *InitSplVaultInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *InitSplVaultInstruction) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSplVaultAccount sets the "spl_vault" account.
func (inst *InitSplVaultInstruction) SetSplVaultAccount(splVault ag_solanago.PublicKey) *InitSplVaultInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(splVault).WRITE()
	return inst
}

func (inst *InitSplVaultInstruction) findFindSplVaultAddress(mint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: vault
	seeds = append(seeds, []byte{byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})
	// path: mint
	seeds = append(seeds, mint.Bytes())
	// arg: BridgeId
	bridgeIdSeed, err := ag_binary.MarshalBorsh(inst.BridgeId)
	if err != nil {
		return
	}
	seeds = append(seeds, bridgeIdSeed)

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindSplVaultAddressWithBumpSeed calculates SplVault account address with given seeds and a known bump seed.
func (inst *InitSplVaultInstruction) FindSplVaultAddressWithBumpSeed(mint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindSplVaultAddress(mint, bumpSeed)
	return
}

func (inst *InitSplVaultInstruction) MustFindSplVaultAddressWithBumpSeed(mint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindSplVaultAddress(mint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindSplVaultAddress finds SplVault account address with given seeds.
func (inst *InitSplVaultInstruction) FindSplVaultAddress(mint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindSplVaultAddress(mint, 0)
	return
}

func (inst *InitSplVaultInstruction) MustFindSplVaultAddress(mint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindSplVaultAddress(mint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetSplVaultAccount gets the "spl_vault" account.
func (inst *InitSplVaultInstruction) GetSplVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSignerAccount sets the "signer" account.
func (inst *InitSplVaultInstruction) SetSignerAccount(signer ag_solanago.PublicKey) *InitSplVaultInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(signer).WRITE().SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *InitSplVaultInstruction) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *InitSplVaultInstruction) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InitSplVaultInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *InitSplVaultInstruction) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitSplVaultInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitSplVaultInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitSplVaultInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst InitSplVaultInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitSplVault,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitSplVaultInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitSplVaultInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BridgeId == nil {
			return errors.New("BridgeId parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SplVault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitSplVaultInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitSplVault")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" BridgeId", *inst.BridgeId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          mint", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     spl_vault", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        signer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" token_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj InitSplVaultInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BridgeId` param:
	err = encoder.Encode(obj.BridgeId)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitSplVaultInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BridgeId`:
	err = decoder.Decode(&obj.BridgeId)
	if err != nil {
		return err
	}
	return nil
}

// NewInitSplVaultInstruction declares a new InitSplVault instruction with the provided parameters and accounts.
func NewInitSplVaultInstruction(
	// Parameters:
	bridge_id string,
	// Accounts:
	mint ag_solanago.PublicKey,
	splVault ag_solanago.PublicKey,
	signer ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitSplVaultInstruction {
	return NewInitSplVaultInstructionBuilder().
		SetBridgeId(bridge_id).
		SetMintAccount(mint).
		SetSplVaultAccount(splVault).
		SetSignerAccount(signer).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram)
}
