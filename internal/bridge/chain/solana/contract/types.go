// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package contract

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Authority struct {
	Bump    uint8
	Signers [][33]uint8
}

func (obj Authority) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Signers` param:
	err = encoder.Encode(obj.Signers)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Authority) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Signers`:
	err = decoder.Decode(&obj.Signers)
	if err != nil {
		return err
	}
	return nil
}

type DepositEvent struct {
	BridgeId string
	User     ag_solanago.PublicKey
	Mint     *ag_solanago.PublicKey `bin:"optional"`
	Amount   uint64
	ChainId  string
	Address  string
}

func (obj DepositEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BridgeId` param:
	err = encoder.Encode(obj.BridgeId)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `Mint` param (optional):
	{
		if obj.Mint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Mint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `ChainId` param:
	err = encoder.Encode(obj.ChainId)
	if err != nil {
		return err
	}
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DepositEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BridgeId`:
	err = decoder.Decode(&obj.BridgeId)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `Mint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Mint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `ChainId`:
	err = decoder.Decode(&obj.ChainId)
	if err != nil {
		return err
	}
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

type TxUsed struct {
	Used bool
}

func (obj TxUsed) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Used` param:
	err = encoder.Encode(obj.Used)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TxUsed) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Used`:
	err = decoder.Decode(&obj.Used)
	if err != nil {
		return err
	}
	return nil
}
