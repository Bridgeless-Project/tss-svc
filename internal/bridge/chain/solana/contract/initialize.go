// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package contract

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize is the `initialize` instruction.
type InitializeInstruction struct {
	BridgeId    *string
	Authorities *[][33]uint8

	// [0] = [WRITE] authority
	//
	// [1] = [WRITE, SIGNER] signer
	//
	// [2] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeInstructionBuilder creates a new `InitializeInstruction` instruction builder.
func NewInitializeInstructionBuilder() *InitializeInstruction {
	nd := &InitializeInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetBridgeId sets the "bridge_id" parameter.
func (inst *InitializeInstruction) SetBridgeId(bridge_id string) *InitializeInstruction {
	inst.BridgeId = &bridge_id
	return inst
}

// SetAuthorities sets the "authorities" parameter.
func (inst *InitializeInstruction) SetAuthorities(authorities [][33]uint8) *InitializeInstruction {
	inst.Authorities = &authorities
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *InitializeInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).WRITE()
	return inst
}

func (inst *InitializeInstruction) findFindAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: authority
	seeds = append(seeds, []byte{byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})
	// arg: BridgeId
	bridgeIdSeed, err := ag_binary.MarshalBorsh(inst.BridgeId)
	if err != nil {
		return
	}
	seeds = append(seeds, bridgeIdSeed)

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindAuthorityAddressWithBumpSeed calculates Authority account address with given seeds and a known bump seed.
func (inst *InitializeInstruction) FindAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindAuthorityAddress(bumpSeed)
	return
}

func (inst *InitializeInstruction) MustFindAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindAuthorityAddress finds Authority account address with given seeds.
func (inst *InitializeInstruction) FindAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindAuthorityAddress(0)
	return
}

func (inst *InitializeInstruction) MustFindAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetAuthorityAccount gets the "authority" account.
func (inst *InitializeInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSignerAccount sets the "signer" account.
func (inst *InitializeInstruction) SetSignerAccount(signer ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(signer).WRITE().SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *InitializeInstruction) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializeInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializeInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst InitializeInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Initialize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BridgeId == nil {
			return errors.New("BridgeId parameter is not set")
		}
		if inst.Authorities == nil {
			return errors.New("Authorities parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitializeInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Initialize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("   BridgeId", *inst.BridgeId))
						paramsBranch.Child(ag_format.Param("Authorities", *inst.Authorities))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        signer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj InitializeInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BridgeId` param:
	err = encoder.Encode(obj.BridgeId)
	if err != nil {
		return err
	}
	// Serialize `Authorities` param:
	err = encoder.Encode(obj.Authorities)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BridgeId`:
	err = decoder.Decode(&obj.BridgeId)
	if err != nil {
		return err
	}
	// Deserialize `Authorities`:
	err = decoder.Decode(&obj.Authorities)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInstruction declares a new Initialize instruction with the provided parameters and accounts.
func NewInitializeInstruction(
	// Parameters:
	bridge_id string,
	authorities [][33]uint8,
	// Accounts:
	authority ag_solanago.PublicKey,
	signer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeInstruction {
	return NewInitializeInstructionBuilder().
		SetBridgeId(bridge_id).
		SetAuthorities(authorities).
		SetAuthorityAccount(authority).
		SetSignerAccount(signer).
		SetSystemProgramAccount(systemProgram)
}
