// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package contract

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
)

type AuthorityAccount struct {
	Bump    uint8
	Signers [][33]uint8
}

var AuthorityAccountDiscriminator = [8]byte{36, 108, 254, 18, 167, 144, 27, 36}

func (obj AuthorityAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(AuthorityAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Signers` param:
	err = encoder.Encode(obj.Signers)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AuthorityAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(AuthorityAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[36 108 254 18 167 144 27 36]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Signers`:
	err = decoder.Decode(&obj.Signers)
	if err != nil {
		return err
	}
	return nil
}

type TxUsedAccount struct {
	Used bool
}

var TxUsedAccountDiscriminator = [8]byte{241, 123, 49, 175, 159, 254, 70, 203}

func (obj TxUsedAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TxUsedAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Used` param:
	err = encoder.Encode(obj.Used)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TxUsedAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TxUsedAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[241 123 49 175 159 254 70 203]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Used`:
	err = decoder.Decode(&obj.Used)
	if err != nil {
		return err
	}
	return nil
}
