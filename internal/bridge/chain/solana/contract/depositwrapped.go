// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package contract

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DepositWrapped is the `deposit_wrapped` instruction.
type DepositWrappedInstruction struct {
	BridgeId  *string
	MintNonce *uint64
	Symbol    *string
	Amount    *uint64
	ChainId   *string
	Address   *string

	// [0] = [WRITE] mint
	//
	// [1] = [WRITE] sender
	//
	// [2] = [WRITE, SIGNER] signer
	//
	// [3] = [] token_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDepositWrappedInstructionBuilder creates a new `DepositWrappedInstruction` instruction builder.
func NewDepositWrappedInstructionBuilder() *DepositWrappedInstruction {
	nd := &DepositWrappedInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetBridgeId sets the "bridge_id" parameter.
func (inst *DepositWrappedInstruction) SetBridgeId(bridge_id string) *DepositWrappedInstruction {
	inst.BridgeId = &bridge_id
	return inst
}

// SetMintNonce sets the "mint_nonce" parameter.
func (inst *DepositWrappedInstruction) SetMintNonce(mint_nonce uint64) *DepositWrappedInstruction {
	inst.MintNonce = &mint_nonce
	return inst
}

// SetSymbol sets the "symbol" parameter.
func (inst *DepositWrappedInstruction) SetSymbol(symbol string) *DepositWrappedInstruction {
	inst.Symbol = &symbol
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *DepositWrappedInstruction) SetAmount(amount uint64) *DepositWrappedInstruction {
	inst.Amount = &amount
	return inst
}

// SetChainId sets the "chain_id" parameter.
func (inst *DepositWrappedInstruction) SetChainId(chain_id string) *DepositWrappedInstruction {
	inst.ChainId = &chain_id
	return inst
}

// SetAddress sets the "address" parameter.
func (inst *DepositWrappedInstruction) SetAddress(address string) *DepositWrappedInstruction {
	inst.Address = &address
	return inst
}

// SetMintAccount sets the "mint" account.
func (inst *DepositWrappedInstruction) SetMintAccount(mint ag_solanago.PublicKey) *DepositWrappedInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(mint).WRITE()
	return inst
}

func (inst *DepositWrappedInstruction) findFindMintAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: mint
	seeds = append(seeds, []byte{byte(0x6d), byte(0x69), byte(0x6e), byte(0x74)})
	// arg: Symbol
	symbolSeed, err := ag_binary.MarshalBorsh(inst.Symbol)
	if err != nil {
		return
	}
	seeds = append(seeds, symbolSeed)
	// arg: MintNonce
	mintNonceSeed, err := ag_binary.MarshalBorsh(inst.MintNonce)
	if err != nil {
		return
	}
	seeds = append(seeds, mintNonceSeed)
	// arg: BridgeId
	bridgeIdSeed, err := ag_binary.MarshalBorsh(inst.BridgeId)
	if err != nil {
		return
	}
	seeds = append(seeds, bridgeIdSeed)

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindMintAddressWithBumpSeed calculates Mint account address with given seeds and a known bump seed.
func (inst *DepositWrappedInstruction) FindMintAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindMintAddress(bumpSeed)
	return
}

func (inst *DepositWrappedInstruction) MustFindMintAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindMintAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindMintAddress finds Mint account address with given seeds.
func (inst *DepositWrappedInstruction) FindMintAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindMintAddress(0)
	return
}

func (inst *DepositWrappedInstruction) MustFindMintAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindMintAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetMintAccount gets the "mint" account.
func (inst *DepositWrappedInstruction) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSenderAccount sets the "sender" account.
func (inst *DepositWrappedInstruction) SetSenderAccount(sender ag_solanago.PublicKey) *DepositWrappedInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(sender).WRITE()
	return inst
}

// GetSenderAccount gets the "sender" account.
func (inst *DepositWrappedInstruction) GetSenderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSignerAccount sets the "signer" account.
func (inst *DepositWrappedInstruction) SetSignerAccount(signer ag_solanago.PublicKey) *DepositWrappedInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(signer).WRITE().SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *DepositWrappedInstruction) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *DepositWrappedInstruction) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DepositWrappedInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *DepositWrappedInstruction) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst DepositWrappedInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DepositWrapped,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DepositWrappedInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DepositWrappedInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BridgeId == nil {
			return errors.New("BridgeId parameter is not set")
		}
		if inst.MintNonce == nil {
			return errors.New("MintNonce parameter is not set")
		}
		if inst.Symbol == nil {
			return errors.New("Symbol parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.ChainId == nil {
			return errors.New("ChainId parameter is not set")
		}
		if inst.Address == nil {
			return errors.New("Address parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Sender is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *DepositWrappedInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DepositWrapped")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=6]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  BridgeId", *inst.BridgeId))
						paramsBranch.Child(ag_format.Param(" MintNonce", *inst.MintNonce))
						paramsBranch.Child(ag_format.Param("    Symbol", *inst.Symbol))
						paramsBranch.Child(ag_format.Param("    Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("   ChainId", *inst.ChainId))
						paramsBranch.Child(ag_format.Param("   Address", *inst.Address))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         mint", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       sender", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       signer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("token_program", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj DepositWrappedInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BridgeId` param:
	err = encoder.Encode(obj.BridgeId)
	if err != nil {
		return err
	}
	// Serialize `MintNonce` param:
	err = encoder.Encode(obj.MintNonce)
	if err != nil {
		return err
	}
	// Serialize `Symbol` param:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `ChainId` param:
	err = encoder.Encode(obj.ChainId)
	if err != nil {
		return err
	}
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DepositWrappedInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BridgeId`:
	err = decoder.Decode(&obj.BridgeId)
	if err != nil {
		return err
	}
	// Deserialize `MintNonce`:
	err = decoder.Decode(&obj.MintNonce)
	if err != nil {
		return err
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `ChainId`:
	err = decoder.Decode(&obj.ChainId)
	if err != nil {
		return err
	}
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

// NewDepositWrappedInstruction declares a new DepositWrapped instruction with the provided parameters and accounts.
func NewDepositWrappedInstruction(
	// Parameters:
	bridge_id string,
	mint_nonce uint64,
	symbol string,
	amount uint64,
	chain_id string,
	address string,
	// Accounts:
	mint ag_solanago.PublicKey,
	sender ag_solanago.PublicKey,
	signer ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *DepositWrappedInstruction {
	return NewDepositWrappedInstructionBuilder().
		SetBridgeId(bridge_id).
		SetMintNonce(mint_nonce).
		SetSymbol(symbol).
		SetAmount(amount).
		SetChainId(chain_id).
		SetAddress(address).
		SetMintAccount(mint).
		SetSenderAccount(sender).
		SetSignerAccount(signer).
		SetTokenProgramAccount(tokenProgram)
}
