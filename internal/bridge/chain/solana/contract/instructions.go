// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package contract

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("GfczFguFNVN8W5S88qGrBYcsCAZ6TTzrZPZfdfWoQ41i")

func SetProgramID(PublicKey ag_solanago.PublicKey) {
	ProgramID = PublicKey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "Contract"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_ChangeAuthority = ag_binary.TypeID([8]byte{50, 106, 66, 104, 99, 118, 145, 88})

	Instruction_DepositNative = ag_binary.TypeID([8]byte{13, 158, 13, 223, 95, 213, 28, 6})

	Instruction_DepositSpl = ag_binary.TypeID([8]byte{224, 0, 198, 175, 198, 47, 105, 204})

	Instruction_DepositWrapped = ag_binary.TypeID([8]byte{55, 72, 116, 0, 195, 33, 142, 235})

	Instruction_InitSplVault = ag_binary.TypeID([8]byte{119, 252, 157, 7, 107, 181, 216, 143})

	Instruction_InitWrappedMint = ag_binary.TypeID([8]byte{130, 249, 176, 48, 101, 223, 71, 226})

	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	Instruction_WithdrawNative = ag_binary.TypeID([8]byte{113, 227, 26, 32, 53, 66, 90, 250})

	Instruction_WithdrawSpl = ag_binary.TypeID([8]byte{181, 154, 94, 86, 62, 115, 6, 186})

	Instruction_WithdrawWrapped = ag_binary.TypeID([8]byte{65, 137, 94, 48, 86, 93, 152, 251})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_ChangeAuthority:
		return "ChangeAuthority"
	case Instruction_DepositNative:
		return "DepositNative"
	case Instruction_DepositSpl:
		return "DepositSpl"
	case Instruction_DepositWrapped:
		return "DepositWrapped"
	case Instruction_InitSplVault:
		return "InitSplVault"
	case Instruction_InitWrappedMint:
		return "InitWrappedMint"
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_WithdrawNative:
		return "WithdrawNative"
	case Instruction_WithdrawSpl:
		return "WithdrawSpl"
	case Instruction_WithdrawWrapped:
		return "WithdrawWrapped"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			Name: "change_authority", Type: (*ChangeAuthorityInstruction)(nil),
		},
		{
			Name: "deposit_native", Type: (*DepositNativeInstruction)(nil),
		},
		{
			Name: "deposit_spl", Type: (*DepositSplInstruction)(nil),
		},
		{
			Name: "deposit_wrapped", Type: (*DepositWrappedInstruction)(nil),
		},
		{
			Name: "init_spl_vault", Type: (*InitSplVaultInstruction)(nil),
		},
		{
			Name: "init_wrapped_mint", Type: (*InitWrappedMintInstruction)(nil),
		},
		{
			Name: "initialize", Type: (*InitializeInstruction)(nil),
		},
		{
			Name: "withdraw_native", Type: (*WithdrawNativeInstruction)(nil),
		},
		{
			Name: "withdraw_spl", Type: (*WithdrawSplInstruction)(nil),
		},
		{
			Name: "withdraw_wrapped", Type: (*WithdrawWrappedInstruction)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := decodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func decodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}

func DecodeInstructions(message *ag_solanago.Message) (instructions []*Instruction, err error) {
	for _, ins := range message.Instructions {
		var programID ag_solanago.PublicKey
		if programID, err = message.Program(ins.ProgramIDIndex); err != nil {
			return
		}
		if !programID.Equals(ProgramID) {
			continue
		}
		var accounts []*ag_solanago.AccountMeta
		if accounts, err = ins.ResolveInstructionAccounts(message); err != nil {
			return
		}
		var insDecoded *Instruction
		if insDecoded, err = decodeInstruction(accounts, ins.Data); err != nil {
			return
		}
		instructions = append(instructions, insDecoded)
	}
	return
}
