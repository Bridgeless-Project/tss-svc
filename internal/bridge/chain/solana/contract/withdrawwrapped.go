// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package contract

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawWrapped is the `withdraw_wrapped` instruction.
type WithdrawWrappedInstruction struct {
	BridgeId   *string
	Hash       *[32]uint8
	MintNonce  *uint64
	Symbol     *string
	Amount     *uint64
	Nonce      *uint64
	Signature  *[64]uint8
	RecoveryId *uint8

	// [0] = [WRITE] mint
	//
	// [1] = [WRITE] receiver
	//
	// [2] = [] authority
	//
	// [3] = [WRITE] tx_used
	//
	// [4] = [WRITE, SIGNER] signer
	//
	// [5] = [] system_program
	//
	// [6] = [] token_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawWrappedInstructionBuilder creates a new `WithdrawWrappedInstruction` instruction builder.
func NewWithdrawWrappedInstructionBuilder() *WithdrawWrappedInstruction {
	nd := &WithdrawWrappedInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	nd.AccountMetaSlice[5] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetBridgeId sets the "bridge_id" parameter.
func (inst *WithdrawWrappedInstruction) SetBridgeId(bridge_id string) *WithdrawWrappedInstruction {
	inst.BridgeId = &bridge_id
	return inst
}

// SetHash sets the "hash" parameter.
func (inst *WithdrawWrappedInstruction) SetHash(hash [32]uint8) *WithdrawWrappedInstruction {
	inst.Hash = &hash
	return inst
}

// SetMintNonce sets the "mint_nonce" parameter.
func (inst *WithdrawWrappedInstruction) SetMintNonce(mint_nonce uint64) *WithdrawWrappedInstruction {
	inst.MintNonce = &mint_nonce
	return inst
}

// SetSymbol sets the "symbol" parameter.
func (inst *WithdrawWrappedInstruction) SetSymbol(symbol string) *WithdrawWrappedInstruction {
	inst.Symbol = &symbol
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *WithdrawWrappedInstruction) SetAmount(amount uint64) *WithdrawWrappedInstruction {
	inst.Amount = &amount
	return inst
}

// SetNonce sets the "nonce" parameter.
func (inst *WithdrawWrappedInstruction) SetNonce(nonce uint64) *WithdrawWrappedInstruction {
	inst.Nonce = &nonce
	return inst
}

// SetSignature sets the "signature" parameter.
func (inst *WithdrawWrappedInstruction) SetSignature(signature [64]uint8) *WithdrawWrappedInstruction {
	inst.Signature = &signature
	return inst
}

// SetRecoveryId sets the "recovery_id" parameter.
func (inst *WithdrawWrappedInstruction) SetRecoveryId(recovery_id uint8) *WithdrawWrappedInstruction {
	inst.RecoveryId = &recovery_id
	return inst
}

// SetMintAccount sets the "mint" account.
func (inst *WithdrawWrappedInstruction) SetMintAccount(mint ag_solanago.PublicKey) *WithdrawWrappedInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(mint).WRITE()
	return inst
}

func (inst *WithdrawWrappedInstruction) findFindMintAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: mint
	seeds = append(seeds, []byte{byte(0x6d), byte(0x69), byte(0x6e), byte(0x74)})
	// arg: Symbol
	symbolSeed, err := ag_binary.MarshalBorsh(inst.Symbol)
	if err != nil {
		return
	}
	seeds = append(seeds, symbolSeed)
	// arg: MintNonce
	mintNonceSeed, err := ag_binary.MarshalBorsh(inst.MintNonce)
	if err != nil {
		return
	}
	seeds = append(seeds, mintNonceSeed)
	// arg: BridgeId
	bridgeIdSeed, err := ag_binary.MarshalBorsh(inst.BridgeId)
	if err != nil {
		return
	}
	seeds = append(seeds, bridgeIdSeed)

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindMintAddressWithBumpSeed calculates Mint account address with given seeds and a known bump seed.
func (inst *WithdrawWrappedInstruction) FindMintAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindMintAddress(bumpSeed)
	return
}

func (inst *WithdrawWrappedInstruction) MustFindMintAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindMintAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindMintAddress finds Mint account address with given seeds.
func (inst *WithdrawWrappedInstruction) FindMintAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindMintAddress(0)
	return
}

func (inst *WithdrawWrappedInstruction) MustFindMintAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindMintAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetMintAccount gets the "mint" account.
func (inst *WithdrawWrappedInstruction) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetReceiverAccount sets the "receiver" account.
func (inst *WithdrawWrappedInstruction) SetReceiverAccount(receiver ag_solanago.PublicKey) *WithdrawWrappedInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(receiver).WRITE()
	return inst
}

// GetReceiverAccount gets the "receiver" account.
func (inst *WithdrawWrappedInstruction) GetReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *WithdrawWrappedInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *WithdrawWrappedInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority)
	return inst
}

func (inst *WithdrawWrappedInstruction) findFindAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: authority
	seeds = append(seeds, []byte{byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})
	// arg: BridgeId
	bridgeIdSeed, err := ag_binary.MarshalBorsh(inst.BridgeId)
	if err != nil {
		return
	}
	seeds = append(seeds, bridgeIdSeed)

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindAuthorityAddressWithBumpSeed calculates Authority account address with given seeds and a known bump seed.
func (inst *WithdrawWrappedInstruction) FindAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindAuthorityAddress(bumpSeed)
	return
}

func (inst *WithdrawWrappedInstruction) MustFindAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindAuthorityAddress finds Authority account address with given seeds.
func (inst *WithdrawWrappedInstruction) FindAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindAuthorityAddress(0)
	return
}

func (inst *WithdrawWrappedInstruction) MustFindAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetAuthorityAccount gets the "authority" account.
func (inst *WithdrawWrappedInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTxUsedAccount sets the "tx_used" account.
func (inst *WithdrawWrappedInstruction) SetTxUsedAccount(txUsed ag_solanago.PublicKey) *WithdrawWrappedInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(txUsed).WRITE()
	return inst
}

func (inst *WithdrawWrappedInstruction) findFindTxUsedAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: withdraw
	seeds = append(seeds, []byte{byte(0x77), byte(0x69), byte(0x74), byte(0x68), byte(0x64), byte(0x72), byte(0x61), byte(0x77)})
	// arg: Hash
	hashSeed, err := ag_binary.MarshalBorsh(inst.Hash)
	if err != nil {
		return
	}
	seeds = append(seeds, hashSeed)
	// arg: BridgeId
	bridgeIdSeed, err := ag_binary.MarshalBorsh(inst.BridgeId)
	if err != nil {
		return
	}
	seeds = append(seeds, bridgeIdSeed)

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindTxUsedAddressWithBumpSeed calculates TxUsed account address with given seeds and a known bump seed.
func (inst *WithdrawWrappedInstruction) FindTxUsedAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindTxUsedAddress(bumpSeed)
	return
}

func (inst *WithdrawWrappedInstruction) MustFindTxUsedAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindTxUsedAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindTxUsedAddress finds TxUsed account address with given seeds.
func (inst *WithdrawWrappedInstruction) FindTxUsedAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindTxUsedAddress(0)
	return
}

func (inst *WithdrawWrappedInstruction) MustFindTxUsedAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindTxUsedAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetTxUsedAccount gets the "tx_used" account.
func (inst *WithdrawWrappedInstruction) GetTxUsedAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSignerAccount sets the "signer" account.
func (inst *WithdrawWrappedInstruction) SetSignerAccount(signer ag_solanago.PublicKey) *WithdrawWrappedInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(signer).WRITE().SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *WithdrawWrappedInstruction) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *WithdrawWrappedInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *WithdrawWrappedInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *WithdrawWrappedInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *WithdrawWrappedInstruction) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WithdrawWrappedInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *WithdrawWrappedInstruction) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst WithdrawWrappedInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawWrapped,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawWrappedInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawWrappedInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BridgeId == nil {
			return errors.New("BridgeId parameter is not set")
		}
		if inst.Hash == nil {
			return errors.New("Hash parameter is not set")
		}
		if inst.MintNonce == nil {
			return errors.New("MintNonce parameter is not set")
		}
		if inst.Symbol == nil {
			return errors.New("Symbol parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.Nonce == nil {
			return errors.New("Nonce parameter is not set")
		}
		if inst.Signature == nil {
			return errors.New("Signature parameter is not set")
		}
		if inst.RecoveryId == nil {
			return errors.New("RecoveryId parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Receiver is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TxUsed is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *WithdrawWrappedInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawWrapped")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=8]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("   BridgeId", *inst.BridgeId))
						paramsBranch.Child(ag_format.Param("       Hash", *inst.Hash))
						paramsBranch.Child(ag_format.Param("  MintNonce", *inst.MintNonce))
						paramsBranch.Child(ag_format.Param("     Symbol", *inst.Symbol))
						paramsBranch.Child(ag_format.Param("     Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("      Nonce", *inst.Nonce))
						paramsBranch.Child(ag_format.Param("  Signature", *inst.Signature))
						paramsBranch.Child(ag_format.Param(" RecoveryId", *inst.RecoveryId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          mint", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      receiver", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       tx_used", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        signer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" token_program", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj WithdrawWrappedInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BridgeId` param:
	err = encoder.Encode(obj.BridgeId)
	if err != nil {
		return err
	}
	// Serialize `Hash` param:
	err = encoder.Encode(obj.Hash)
	if err != nil {
		return err
	}
	// Serialize `MintNonce` param:
	err = encoder.Encode(obj.MintNonce)
	if err != nil {
		return err
	}
	// Serialize `Symbol` param:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `Signature` param:
	err = encoder.Encode(obj.Signature)
	if err != nil {
		return err
	}
	// Serialize `RecoveryId` param:
	err = encoder.Encode(obj.RecoveryId)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WithdrawWrappedInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BridgeId`:
	err = decoder.Decode(&obj.BridgeId)
	if err != nil {
		return err
	}
	// Deserialize `Hash`:
	err = decoder.Decode(&obj.Hash)
	if err != nil {
		return err
	}
	// Deserialize `MintNonce`:
	err = decoder.Decode(&obj.MintNonce)
	if err != nil {
		return err
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `Signature`:
	err = decoder.Decode(&obj.Signature)
	if err != nil {
		return err
	}
	// Deserialize `RecoveryId`:
	err = decoder.Decode(&obj.RecoveryId)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawWrappedInstruction declares a new WithdrawWrapped instruction with the provided parameters and accounts.
func NewWithdrawWrappedInstruction(
	// Parameters:
	bridge_id string,
	hash [32]uint8,
	mint_nonce uint64,
	symbol string,
	amount uint64,
	nonce uint64,
	signature [64]uint8,
	recovery_id uint8,
	// Accounts:
	mint ag_solanago.PublicKey,
	receiver ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	txUsed ag_solanago.PublicKey,
	signer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *WithdrawWrappedInstruction {
	return NewWithdrawWrappedInstructionBuilder().
		SetBridgeId(bridge_id).
		SetHash(hash).
		SetMintNonce(mint_nonce).
		SetSymbol(symbol).
		SetAmount(amount).
		SetNonce(nonce).
		SetSignature(signature).
		SetRecoveryId(recovery_id).
		SetMintAccount(mint).
		SetReceiverAccount(receiver).
		SetAuthorityAccount(authority).
		SetTxUsedAccount(txUsed).
		SetSignerAccount(signer).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram)
}
