// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package contract

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DepositNative is the `deposit_native` instruction.
type DepositNativeInstruction struct {
	BridgeId *string
	Amount   *uint64
	ChainId  *string
	Address  *string

	// [0] = [WRITE] authority
	//
	// [1] = [WRITE, SIGNER] sender
	//
	// [2] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDepositNativeInstructionBuilder creates a new `DepositNativeInstruction` instruction builder.
func NewDepositNativeInstructionBuilder() *DepositNativeInstruction {
	nd := &DepositNativeInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetBridgeId sets the "bridge_id" parameter.
func (inst *DepositNativeInstruction) SetBridgeId(bridge_id string) *DepositNativeInstruction {
	inst.BridgeId = &bridge_id
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *DepositNativeInstruction) SetAmount(amount uint64) *DepositNativeInstruction {
	inst.Amount = &amount
	return inst
}

// SetChainId sets the "chain_id" parameter.
func (inst *DepositNativeInstruction) SetChainId(chain_id string) *DepositNativeInstruction {
	inst.ChainId = &chain_id
	return inst
}

// SetAddress sets the "address" parameter.
func (inst *DepositNativeInstruction) SetAddress(address string) *DepositNativeInstruction {
	inst.Address = &address
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *DepositNativeInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *DepositNativeInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).WRITE()
	return inst
}

func (inst *DepositNativeInstruction) findFindAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: authority
	seeds = append(seeds, []byte{byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})
	// arg: BridgeId
	bridgeIdSeed, err := ag_binary.MarshalBorsh(inst.BridgeId)
	if err != nil {
		return
	}
	seeds = append(seeds, bridgeIdSeed)

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindAuthorityAddressWithBumpSeed calculates Authority account address with given seeds and a known bump seed.
func (inst *DepositNativeInstruction) FindAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindAuthorityAddress(bumpSeed)
	return
}

func (inst *DepositNativeInstruction) MustFindAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindAuthorityAddress finds Authority account address with given seeds.
func (inst *DepositNativeInstruction) FindAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindAuthorityAddress(0)
	return
}

func (inst *DepositNativeInstruction) MustFindAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetAuthorityAccount gets the "authority" account.
func (inst *DepositNativeInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSenderAccount sets the "sender" account.
func (inst *DepositNativeInstruction) SetSenderAccount(sender ag_solanago.PublicKey) *DepositNativeInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(sender).WRITE().SIGNER()
	return inst
}

// GetSenderAccount gets the "sender" account.
func (inst *DepositNativeInstruction) GetSenderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *DepositNativeInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *DepositNativeInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *DepositNativeInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst DepositNativeInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DepositNative,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DepositNativeInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DepositNativeInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BridgeId == nil {
			return errors.New("BridgeId parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.ChainId == nil {
			return errors.New("ChainId parameter is not set")
		}
		if inst.Address == nil {
			return errors.New("Address parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Sender is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *DepositNativeInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DepositNative")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" BridgeId", *inst.BridgeId))
						paramsBranch.Child(ag_format.Param("   Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("  ChainId", *inst.ChainId))
						paramsBranch.Child(ag_format.Param("  Address", *inst.Address))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        sender", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj DepositNativeInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BridgeId` param:
	err = encoder.Encode(obj.BridgeId)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `ChainId` param:
	err = encoder.Encode(obj.ChainId)
	if err != nil {
		return err
	}
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DepositNativeInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BridgeId`:
	err = decoder.Decode(&obj.BridgeId)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `ChainId`:
	err = decoder.Decode(&obj.ChainId)
	if err != nil {
		return err
	}
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

// NewDepositNativeInstruction declares a new DepositNative instruction with the provided parameters and accounts.
func NewDepositNativeInstruction(
	// Parameters:
	bridge_id string,
	amount uint64,
	chain_id string,
	address string,
	// Accounts:
	authority ag_solanago.PublicKey,
	sender ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *DepositNativeInstruction {
	return NewDepositNativeInstructionBuilder().
		SetBridgeId(bridge_id).
		SetAmount(amount).
		SetChainId(chain_id).
		SetAddress(address).
		SetAuthorityAccount(authority).
		SetSenderAccount(sender).
		SetSystemProgramAccount(systemProgram)
}
