// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: p2p_server.proto

package p2p

import (
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/Bridgeless-Project/tss-svc/internal/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartyStatus int32

const (
	PartyStatus_PS_UNKNOWN PartyStatus = 0
	PartyStatus_PS_KEYGEN  PartyStatus = 1
	PartyStatus_PS_SIGN    PartyStatus = 2
	PartyStatus_PS_RESHARE PartyStatus = 3
	PartyStatus_PS_SYNC    PartyStatus = 4
)

// Enum value maps for PartyStatus.
var (
	PartyStatus_name = map[int32]string{
		0: "PS_UNKNOWN",
		1: "PS_KEYGEN",
		2: "PS_SIGN",
		3: "PS_RESHARE",
		4: "PS_SYNC",
	}
	PartyStatus_value = map[string]int32{
		"PS_UNKNOWN": 0,
		"PS_KEYGEN":  1,
		"PS_SIGN":    2,
		"PS_RESHARE": 3,
		"PS_SYNC":    4,
	}
)

func (x PartyStatus) Enum() *PartyStatus {
	p := new(PartyStatus)
	*p = x
	return p
}

func (x PartyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_p2p_server_proto_enumTypes[0].Descriptor()
}

func (PartyStatus) Type() protoreflect.EnumType {
	return &file_p2p_server_proto_enumTypes[0]
}

func (x PartyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartyStatus.Descriptor instead.
func (PartyStatus) EnumDescriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{0}
}

type RequestType int32

const (
	RequestType_RT_KEYGEN                 RequestType = 0
	RequestType_RT_SIGN                   RequestType = 1
	RequestType_RT_PROPOSAL               RequestType = 2
	RequestType_RT_ACCEPTANCE             RequestType = 3
	RequestType_RT_SIGN_START             RequestType = 4
	RequestType_RT_DEPOSIT_DISTRIBUTION   RequestType = 5
	RequestType_RT_SIGNATURE_DISTRIBUTION RequestType = 6
)

// Enum value maps for RequestType.
var (
	RequestType_name = map[int32]string{
		0: "RT_KEYGEN",
		1: "RT_SIGN",
		2: "RT_PROPOSAL",
		3: "RT_ACCEPTANCE",
		4: "RT_SIGN_START",
		5: "RT_DEPOSIT_DISTRIBUTION",
		6: "RT_SIGNATURE_DISTRIBUTION",
	}
	RequestType_value = map[string]int32{
		"RT_KEYGEN":                 0,
		"RT_SIGN":                   1,
		"RT_PROPOSAL":               2,
		"RT_ACCEPTANCE":             3,
		"RT_SIGN_START":             4,
		"RT_DEPOSIT_DISTRIBUTION":   5,
		"RT_SIGNATURE_DISTRIBUTION": 6,
	}
)

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}

func (x RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_p2p_server_proto_enumTypes[1].Descriptor()
}

func (RequestType) Type() protoreflect.EnumType {
	return &file_p2p_server_proto_enumTypes[1]
}

func (x RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestType.Descriptor instead.
func (RequestType) EnumDescriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{1}
}

type SigningSessionInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainId       string                 `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningSessionInfoRequest) Reset() {
	*x = SigningSessionInfoRequest{}
	mi := &file_p2p_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningSessionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningSessionInfoRequest) ProtoMessage() {}

func (x *SigningSessionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningSessionInfoRequest.ProtoReflect.Descriptor instead.
func (*SigningSessionInfoRequest) Descriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{0}
}

func (x *SigningSessionInfoRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

type SigningSessionInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NextSessionStartTime int64                  `protobuf:"varint,2,opt,name=nextSessionStartTime,proto3" json:"nextSessionStartTime,omitempty"`
	Threshold            int64                  `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	ChainId              string                 `protobuf:"bytes,4,opt,name=chainId,proto3" json:"chainId,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SigningSessionInfo) Reset() {
	*x = SigningSessionInfo{}
	mi := &file_p2p_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningSessionInfo) ProtoMessage() {}

func (x *SigningSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningSessionInfo.ProtoReflect.Descriptor instead.
func (*SigningSessionInfo) Descriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{1}
}

func (x *SigningSessionInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SigningSessionInfo) GetNextSessionStartTime() int64 {
	if x != nil {
		return x.NextSessionStartTime
	}
	return 0
}

func (x *SigningSessionInfo) GetThreshold() int64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *SigningSessionInfo) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        PartyStatus            `protobuf:"varint,1,opt,name=status,proto3,enum=p2p.PartyStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_p2p_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{2}
}

func (x *StatusResponse) GetStatus() PartyStatus {
	if x != nil {
		return x.Status
	}
	return PartyStatus_PS_UNKNOWN
}

type SubmitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sender        string                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Type          RequestType            `protobuf:"varint,3,opt,name=type,proto3,enum=p2p.RequestType" json:"type,omitempty"`
	Data          *anypb.Any             `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitRequest) Reset() {
	*x = SubmitRequest{}
	mi := &file_p2p_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitRequest) ProtoMessage() {}

func (x *SubmitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitRequest.ProtoReflect.Descriptor instead.
func (*SubmitRequest) Descriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitRequest) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *SubmitRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SubmitRequest) GetType() RequestType {
	if x != nil {
		return x.Type
	}
	return RequestType_RT_KEYGEN
}

func (x *SubmitRequest) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type TssData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	IsBroadcast   bool                   `protobuf:"varint,2,opt,name=isBroadcast,proto3" json:"isBroadcast,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TssData) Reset() {
	*x = TssData{}
	mi := &file_p2p_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TssData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TssData) ProtoMessage() {}

func (x *TssData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TssData.ProtoReflect.Descriptor instead.
func (*TssData) Descriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{4}
}

func (x *TssData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TssData) GetIsBroadcast() bool {
	if x != nil {
		return x.IsBroadcast
	}
	return false
}

type SignStartData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Parties       []string               `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignStartData) Reset() {
	*x = SignStartData{}
	mi := &file_p2p_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignStartData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignStartData) ProtoMessage() {}

func (x *SignStartData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignStartData.ProtoReflect.Descriptor instead.
func (*SignStartData) Descriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{5}
}

func (x *SignStartData) GetParties() []string {
	if x != nil {
		return x.Parties
	}
	return nil
}

type AcceptanceData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accepted      bool                   `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcceptanceData) Reset() {
	*x = AcceptanceData{}
	mi := &file_p2p_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcceptanceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptanceData) ProtoMessage() {}

func (x *AcceptanceData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptanceData.ProtoReflect.Descriptor instead.
func (*AcceptanceData) Descriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{6}
}

func (x *AcceptanceData) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

type EvmProposalData struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	DepositId     *types.DepositIdentifier `protobuf:"bytes,1,opt,name=depositId,proto3" json:"depositId,omitempty"`
	SigData       []byte                   `protobuf:"bytes,2,opt,name=sigData,proto3" json:"sigData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvmProposalData) Reset() {
	*x = EvmProposalData{}
	mi := &file_p2p_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvmProposalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvmProposalData) ProtoMessage() {}

func (x *EvmProposalData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvmProposalData.ProtoReflect.Descriptor instead.
func (*EvmProposalData) Descriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{7}
}

func (x *EvmProposalData) GetDepositId() *types.DepositIdentifier {
	if x != nil {
		return x.DepositId
	}
	return nil
}

func (x *EvmProposalData) GetSigData() []byte {
	if x != nil {
		return x.SigData
	}
	return nil
}

type TonProposalData struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	DepositId     *types.DepositIdentifier `protobuf:"bytes,1,opt,name=depositId,proto3" json:"depositId,omitempty"`
	SigData       []byte                   `protobuf:"bytes,2,opt,name=sigData,proto3" json:"sigData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TonProposalData) Reset() {
	*x = TonProposalData{}
	mi := &file_p2p_server_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TonProposalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TonProposalData) ProtoMessage() {}

func (x *TonProposalData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_server_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TonProposalData.ProtoReflect.Descriptor instead.
func (*TonProposalData) Descriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{8}
}

func (x *TonProposalData) GetDepositId() *types.DepositIdentifier {
	if x != nil {
		return x.DepositId
	}
	return nil
}

func (x *TonProposalData) GetSigData() []byte {
	if x != nil {
		return x.SigData
	}
	return nil
}

type ZanoProposalData struct {
	state     protoimpl.MessageState   `protogen:"open.v1"`
	DepositId *types.DepositIdentifier `protobuf:"bytes,1,opt,name=depositId,proto3" json:"depositId,omitempty"`
	// data to decrypt tx info
	OutputsAddresses []string `protobuf:"bytes,2,rep,name=outputsAddresses,proto3" json:"outputsAddresses,omitempty"`
	UnsignedTx       string   `protobuf:"bytes,3,opt,name=unsignedTx,proto3" json:"unsignedTx,omitempty"`
	FinalizedTx      string   `protobuf:"bytes,4,opt,name=finalizedTx,proto3" json:"finalizedTx,omitempty"`
	TxSecretKey      string   `protobuf:"bytes,5,opt,name=txSecretKey,proto3" json:"txSecretKey,omitempty"`
	TxId             string   `protobuf:"bytes,6,opt,name=txId,proto3" json:"txId,omitempty"`
	SigData          []byte   `protobuf:"bytes,7,opt,name=sigData,proto3" json:"sigData,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ZanoProposalData) Reset() {
	*x = ZanoProposalData{}
	mi := &file_p2p_server_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ZanoProposalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZanoProposalData) ProtoMessage() {}

func (x *ZanoProposalData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_server_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZanoProposalData.ProtoReflect.Descriptor instead.
func (*ZanoProposalData) Descriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{9}
}

func (x *ZanoProposalData) GetDepositId() *types.DepositIdentifier {
	if x != nil {
		return x.DepositId
	}
	return nil
}

func (x *ZanoProposalData) GetOutputsAddresses() []string {
	if x != nil {
		return x.OutputsAddresses
	}
	return nil
}

func (x *ZanoProposalData) GetUnsignedTx() string {
	if x != nil {
		return x.UnsignedTx
	}
	return ""
}

func (x *ZanoProposalData) GetFinalizedTx() string {
	if x != nil {
		return x.FinalizedTx
	}
	return ""
}

func (x *ZanoProposalData) GetTxSecretKey() string {
	if x != nil {
		return x.TxSecretKey
	}
	return ""
}

func (x *ZanoProposalData) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *ZanoProposalData) GetSigData() []byte {
	if x != nil {
		return x.SigData
	}
	return nil
}

type BitcoinProposalData struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	DepositId     *types.DepositIdentifier `protobuf:"bytes,1,opt,name=depositId,proto3" json:"depositId,omitempty"`
	SerializedTx  []byte                   `protobuf:"bytes,2,opt,name=serializedTx,proto3" json:"serializedTx,omitempty"`
	SigData       [][]byte                 `protobuf:"bytes,3,rep,name=sigData,proto3" json:"sigData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BitcoinProposalData) Reset() {
	*x = BitcoinProposalData{}
	mi := &file_p2p_server_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BitcoinProposalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinProposalData) ProtoMessage() {}

func (x *BitcoinProposalData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_server_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinProposalData.ProtoReflect.Descriptor instead.
func (*BitcoinProposalData) Descriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{10}
}

func (x *BitcoinProposalData) GetDepositId() *types.DepositIdentifier {
	if x != nil {
		return x.DepositId
	}
	return nil
}

func (x *BitcoinProposalData) GetSerializedTx() []byte {
	if x != nil {
		return x.SerializedTx
	}
	return nil
}

func (x *BitcoinProposalData) GetSigData() [][]byte {
	if x != nil {
		return x.SigData
	}
	return nil
}

type BitcoinResharingProposalData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SerializedTx  []byte                 `protobuf:"bytes,1,opt,name=serializedTx,proto3" json:"serializedTx,omitempty"`
	SigData       [][]byte               `protobuf:"bytes,2,rep,name=sigData,proto3" json:"sigData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BitcoinResharingProposalData) Reset() {
	*x = BitcoinResharingProposalData{}
	mi := &file_p2p_server_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BitcoinResharingProposalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinResharingProposalData) ProtoMessage() {}

func (x *BitcoinResharingProposalData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_server_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinResharingProposalData.ProtoReflect.Descriptor instead.
func (*BitcoinResharingProposalData) Descriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{11}
}

func (x *BitcoinResharingProposalData) GetSerializedTx() []byte {
	if x != nil {
		return x.SerializedTx
	}
	return nil
}

func (x *BitcoinResharingProposalData) GetSigData() [][]byte {
	if x != nil {
		return x.SigData
	}
	return nil
}

type ZanoResharingProposalData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AssetId        string                 `protobuf:"bytes,1,opt,name=assetId,proto3" json:"assetId,omitempty"`
	OwnerEthPubKey string                 `protobuf:"bytes,2,opt,name=ownerEthPubKey,proto3" json:"ownerEthPubKey,omitempty"`
	// data to decrypt tx info
	OutputsAddresses []string `protobuf:"bytes,3,rep,name=outputsAddresses,proto3" json:"outputsAddresses,omitempty"`
	UnsignedTx       string   `protobuf:"bytes,4,opt,name=unsignedTx,proto3" json:"unsignedTx,omitempty"`
	FinalizedTx      string   `protobuf:"bytes,5,opt,name=finalizedTx,proto3" json:"finalizedTx,omitempty"`
	TxSecretKey      string   `protobuf:"bytes,6,opt,name=txSecretKey,proto3" json:"txSecretKey,omitempty"`
	TxId             string   `protobuf:"bytes,7,opt,name=txId,proto3" json:"txId,omitempty"`
	SigData          []byte   `protobuf:"bytes,8,opt,name=sigData,proto3" json:"sigData,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ZanoResharingProposalData) Reset() {
	*x = ZanoResharingProposalData{}
	mi := &file_p2p_server_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ZanoResharingProposalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZanoResharingProposalData) ProtoMessage() {}

func (x *ZanoResharingProposalData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_server_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZanoResharingProposalData.ProtoReflect.Descriptor instead.
func (*ZanoResharingProposalData) Descriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{12}
}

func (x *ZanoResharingProposalData) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ZanoResharingProposalData) GetOwnerEthPubKey() string {
	if x != nil {
		return x.OwnerEthPubKey
	}
	return ""
}

func (x *ZanoResharingProposalData) GetOutputsAddresses() []string {
	if x != nil {
		return x.OutputsAddresses
	}
	return nil
}

func (x *ZanoResharingProposalData) GetUnsignedTx() string {
	if x != nil {
		return x.UnsignedTx
	}
	return ""
}

func (x *ZanoResharingProposalData) GetFinalizedTx() string {
	if x != nil {
		return x.FinalizedTx
	}
	return ""
}

func (x *ZanoResharingProposalData) GetTxSecretKey() string {
	if x != nil {
		return x.TxSecretKey
	}
	return ""
}

func (x *ZanoResharingProposalData) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *ZanoResharingProposalData) GetSigData() []byte {
	if x != nil {
		return x.SigData
	}
	return nil
}

type DepositDistributionData struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	DepositId     *types.DepositIdentifier `protobuf:"bytes,1,opt,name=depositId,proto3" json:"depositId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepositDistributionData) Reset() {
	*x = DepositDistributionData{}
	mi := &file_p2p_server_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepositDistributionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositDistributionData) ProtoMessage() {}

func (x *DepositDistributionData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_server_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositDistributionData.ProtoReflect.Descriptor instead.
func (*DepositDistributionData) Descriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{13}
}

func (x *DepositDistributionData) GetDepositId() *types.DepositIdentifier {
	if x != nil {
		return x.DepositId
	}
	return nil
}

type ReliableBroadcastData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoundMsg      []byte                 `protobuf:"bytes,1,opt,name=roundMsg,proto3" json:"roundMsg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReliableBroadcastData) Reset() {
	*x = ReliableBroadcastData{}
	mi := &file_p2p_server_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReliableBroadcastData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReliableBroadcastData) ProtoMessage() {}

func (x *ReliableBroadcastData) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_server_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReliableBroadcastData.ProtoReflect.Descriptor instead.
func (*ReliableBroadcastData) Descriptor() ([]byte, []int) {
	return file_p2p_server_proto_rawDescGZIP(), []int{14}
}

func (x *ReliableBroadcastData) GetRoundMsg() []byte {
	if x != nil {
		return x.RoundMsg
	}
	return nil
}

var File_p2p_server_proto protoreflect.FileDescriptor

const file_p2p_server_proto_rawDesc = "" +
	"\n" +
	"\x10p2p_server.proto\x12\x03p2p\x1a\x1bgoogle/protobuf/empty.proto\x1a\x19google/protobuf/any.proto\x1a\x14gogoproto/gogo.proto\x1a\rdeposit.proto\"6\n" +
	"\x19SigningSessionInfoRequest\x12\x19\n" +
	"\bchain_id\x18\x01 \x01(\tR\achainId\"\x90\x01\n" +
	"\x12SigningSessionInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x122\n" +
	"\x14nextSessionStartTime\x18\x02 \x01(\x03R\x14nextSessionStartTime\x12\x1c\n" +
	"\tthreshold\x18\x03 \x01(\x03R\tthreshold\x12\x18\n" +
	"\achainId\x18\x04 \x01(\tR\achainId\":\n" +
	"\x0eStatusResponse\x12(\n" +
	"\x06status\x18\x01 \x01(\x0e2\x10.p2p.PartyStatusR\x06status\"\x95\x01\n" +
	"\rSubmitRequest\x12\x16\n" +
	"\x06sender\x18\x01 \x01(\tR\x06sender\x12\x1c\n" +
	"\tsessionId\x18\x02 \x01(\tR\tsessionId\x12$\n" +
	"\x04type\x18\x03 \x01(\x0e2\x10.p2p.RequestTypeR\x04type\x12(\n" +
	"\x04data\x18\x04 \x01(\v2\x14.google.protobuf.AnyR\x04data\"?\n" +
	"\aTssData\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12 \n" +
	"\visBroadcast\x18\x02 \x01(\bR\visBroadcast\")\n" +
	"\rSignStartData\x12\x18\n" +
	"\aparties\x18\x01 \x03(\tR\aparties\",\n" +
	"\x0eAcceptanceData\x12\x1a\n" +
	"\baccepted\x18\x01 \x01(\bR\baccepted\"k\n" +
	"\x0fEvmProposalData\x12>\n" +
	"\tdepositId\x18\x01 \x01(\v2\x1a.deposit.DepositIdentifierB\x04\xc8\xde\x1f\x00R\tdepositId\x12\x18\n" +
	"\asigData\x18\x02 \x01(\fR\asigData\"k\n" +
	"\x0fTonProposalData\x12>\n" +
	"\tdepositId\x18\x01 \x01(\v2\x1a.deposit.DepositIdentifierB\x04\xc8\xde\x1f\x00R\tdepositId\x12\x18\n" +
	"\asigData\x18\x02 \x01(\fR\asigData\"\x90\x02\n" +
	"\x10ZanoProposalData\x12>\n" +
	"\tdepositId\x18\x01 \x01(\v2\x1a.deposit.DepositIdentifierB\x04\xc8\xde\x1f\x00R\tdepositId\x12*\n" +
	"\x10outputsAddresses\x18\x02 \x03(\tR\x10outputsAddresses\x12\x1e\n" +
	"\n" +
	"unsignedTx\x18\x03 \x01(\tR\n" +
	"unsignedTx\x12 \n" +
	"\vfinalizedTx\x18\x04 \x01(\tR\vfinalizedTx\x12 \n" +
	"\vtxSecretKey\x18\x05 \x01(\tR\vtxSecretKey\x12\x12\n" +
	"\x04txId\x18\x06 \x01(\tR\x04txId\x12\x18\n" +
	"\asigData\x18\a \x01(\fR\asigData\"\x93\x01\n" +
	"\x13BitcoinProposalData\x12>\n" +
	"\tdepositId\x18\x01 \x01(\v2\x1a.deposit.DepositIdentifierB\x04\xc8\xde\x1f\x00R\tdepositId\x12\"\n" +
	"\fserializedTx\x18\x02 \x01(\fR\fserializedTx\x12\x18\n" +
	"\asigData\x18\x03 \x03(\fR\asigData\"\\\n" +
	"\x1cBitcoinResharingProposalData\x12\"\n" +
	"\fserializedTx\x18\x01 \x01(\fR\fserializedTx\x12\x18\n" +
	"\asigData\x18\x02 \x03(\fR\asigData\"\x9b\x02\n" +
	"\x19ZanoResharingProposalData\x12\x18\n" +
	"\aassetId\x18\x01 \x01(\tR\aassetId\x12&\n" +
	"\x0eownerEthPubKey\x18\x02 \x01(\tR\x0eownerEthPubKey\x12*\n" +
	"\x10outputsAddresses\x18\x03 \x03(\tR\x10outputsAddresses\x12\x1e\n" +
	"\n" +
	"unsignedTx\x18\x04 \x01(\tR\n" +
	"unsignedTx\x12 \n" +
	"\vfinalizedTx\x18\x05 \x01(\tR\vfinalizedTx\x12 \n" +
	"\vtxSecretKey\x18\x06 \x01(\tR\vtxSecretKey\x12\x12\n" +
	"\x04txId\x18\a \x01(\tR\x04txId\x12\x18\n" +
	"\asigData\x18\b \x01(\fR\asigData\"Y\n" +
	"\x17DepositDistributionData\x12>\n" +
	"\tdepositId\x18\x01 \x01(\v2\x1a.deposit.DepositIdentifierB\x04\xc8\xde\x1f\x00R\tdepositId\"3\n" +
	"\x15ReliableBroadcastData\x12\x1a\n" +
	"\broundMsg\x18\x01 \x01(\fR\broundMsg*V\n" +
	"\vPartyStatus\x12\x0e\n" +
	"\n" +
	"PS_UNKNOWN\x10\x00\x12\r\n" +
	"\tPS_KEYGEN\x10\x01\x12\v\n" +
	"\aPS_SIGN\x10\x02\x12\x0e\n" +
	"\n" +
	"PS_RESHARE\x10\x03\x12\v\n" +
	"\aPS_SYNC\x10\x04*\x9c\x01\n" +
	"\vRequestType\x12\r\n" +
	"\tRT_KEYGEN\x10\x00\x12\v\n" +
	"\aRT_SIGN\x10\x01\x12\x0f\n" +
	"\vRT_PROPOSAL\x10\x02\x12\x11\n" +
	"\rRT_ACCEPTANCE\x10\x03\x12\x11\n" +
	"\rRT_SIGN_START\x10\x04\x12\x1b\n" +
	"\x17RT_DEPOSIT_DISTRIBUTION\x10\x05\x12\x1d\n" +
	"\x19RT_SIGNATURE_DISTRIBUTION\x10\x062\xca\x01\n" +
	"\x03P2P\x127\n" +
	"\x06Status\x12\x16.google.protobuf.Empty\x1a\x13.p2p.StatusResponse\"\x00\x126\n" +
	"\x06Submit\x12\x12.p2p.SubmitRequest\x1a\x16.google.protobuf.Empty\"\x00\x12R\n" +
	"\x15GetSigningSessionInfo\x12\x1e.p2p.SigningSessionInfoRequest\x1a\x17.p2p.SigningSessionInfo\"\x00B+Z)github.com/Bridgeless-Project/tss-svc/internal/p2pb\x06proto3"

var (
	file_p2p_server_proto_rawDescOnce sync.Once
	file_p2p_server_proto_rawDescData []byte
)

func file_p2p_server_proto_rawDescGZIP() []byte {
	file_p2p_server_proto_rawDescOnce.Do(func() {
		file_p2p_server_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_p2p_server_proto_rawDesc), len(file_p2p_server_proto_rawDesc)))
	})
	return file_p2p_server_proto_rawDescData
}

var file_p2p_server_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_p2p_server_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_p2p_server_proto_goTypes = []any{
	(PartyStatus)(0),                     // 0: p2p.PartyStatus
	(RequestType)(0),                     // 1: p2p.RequestType
	(*SigningSessionInfoRequest)(nil),    // 2: p2p.SigningSessionInfoRequest
	(*SigningSessionInfo)(nil),           // 3: p2p.SigningSessionInfo
	(*StatusResponse)(nil),               // 4: p2p.StatusResponse
	(*SubmitRequest)(nil),                // 5: p2p.SubmitRequest
	(*TssData)(nil),                      // 6: p2p.TssData
	(*SignStartData)(nil),                // 7: p2p.SignStartData
	(*AcceptanceData)(nil),               // 8: p2p.AcceptanceData
	(*EvmProposalData)(nil),              // 9: p2p.EvmProposalData
	(*TonProposalData)(nil),              // 10: p2p.TonProposalData
	(*ZanoProposalData)(nil),             // 11: p2p.ZanoProposalData
	(*BitcoinProposalData)(nil),          // 12: p2p.BitcoinProposalData
	(*BitcoinResharingProposalData)(nil), // 13: p2p.BitcoinResharingProposalData
	(*ZanoResharingProposalData)(nil),    // 14: p2p.ZanoResharingProposalData
	(*DepositDistributionData)(nil),      // 15: p2p.DepositDistributionData
	(*ReliableBroadcastData)(nil),        // 16: p2p.ReliableBroadcastData
	(*anypb.Any)(nil),                    // 17: google.protobuf.Any
	(*types.DepositIdentifier)(nil),      // 18: deposit.DepositIdentifier
	(*emptypb.Empty)(nil),                // 19: google.protobuf.Empty
}
var file_p2p_server_proto_depIdxs = []int32{
	0,  // 0: p2p.StatusResponse.status:type_name -> p2p.PartyStatus
	1,  // 1: p2p.SubmitRequest.type:type_name -> p2p.RequestType
	17, // 2: p2p.SubmitRequest.data:type_name -> google.protobuf.Any
	18, // 3: p2p.EvmProposalData.depositId:type_name -> deposit.DepositIdentifier
	18, // 4: p2p.TonProposalData.depositId:type_name -> deposit.DepositIdentifier
	18, // 5: p2p.ZanoProposalData.depositId:type_name -> deposit.DepositIdentifier
	18, // 6: p2p.BitcoinProposalData.depositId:type_name -> deposit.DepositIdentifier
	18, // 7: p2p.DepositDistributionData.depositId:type_name -> deposit.DepositIdentifier
	19, // 8: p2p.P2P.Status:input_type -> google.protobuf.Empty
	5,  // 9: p2p.P2P.Submit:input_type -> p2p.SubmitRequest
	2,  // 10: p2p.P2P.GetSigningSessionInfo:input_type -> p2p.SigningSessionInfoRequest
	4,  // 11: p2p.P2P.Status:output_type -> p2p.StatusResponse
	19, // 12: p2p.P2P.Submit:output_type -> google.protobuf.Empty
	3,  // 13: p2p.P2P.GetSigningSessionInfo:output_type -> p2p.SigningSessionInfo
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_p2p_server_proto_init() }
func file_p2p_server_proto_init() {
	if File_p2p_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_p2p_server_proto_rawDesc), len(file_p2p_server_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_p2p_server_proto_goTypes,
		DependencyIndexes: file_p2p_server_proto_depIdxs,
		EnumInfos:         file_p2p_server_proto_enumTypes,
		MessageInfos:      file_p2p_server_proto_msgTypes,
	}.Build()
	File_p2p_server_proto = out.File
	file_p2p_server_proto_goTypes = nil
	file_p2p_server_proto_depIdxs = nil
}
